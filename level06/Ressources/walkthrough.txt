On a ici un programme qui nous demande un login, puis un nombre serial, et enfin exit.
En ouvrant GDB, on trouve deux fonction principales: le main et auth()
En lançant avec qq breakpoint, on se heurte rapidement à un problème : il y a une vérification de notre environnement 
grace à un ptrace.
De ce fait la lecture du code pas à pas se complique.
Cependant en plongeant dans l'asm on remarque quelques élément:
On voit un system(/bin/sh)
Et on voit la condition pour parvenir à lancer cet appelle system : il faut que le retour de auth == 0

En allant voir dans auth on remarque que les return 1 sont beaucoup nombreux que les return 0.
Pour qu'il y ai un return 0, il faut remplir une condition que la succession d'opération mathématique sur le login soit égal au nombre serial qu'on aura donné.
En fait il s'agit simplement d'un hash.

On a deux options alors:
Soit on décode pas à pas ce que l'asm fait subir à notre Login pour trouver le résultat qu'il faut mettre (cf programme hash.c)
Soit on trouve un moyen de passer outre la vérification de ptrace.

Le décodage du hash est plus ou moins possible, mais peut évident, il y a quelque piege comme le mul, qui va stocker une partie du résultat dans un registre, et l'autre dans un autre registre.
Le détails de la description du hash se trouve dans hash.c.

Le moyen le plus simple est de passer la vérification de ptrace. En effet, le hash de notre login est stocké en mémoire à $ebp-0x10.
On a donc le moyen de mettre eax à 0 au moment de ptrace pour passer la vérification:

(gdb) catch syscall ptrace   (met un breakpoint quand rencontre ptrace)
(gdb) commands 1             (crée une commande à réaliser lors du premier breakpoints)
> set ($eax) = 0             (détails de la commande: retour de ptrace = 0, continue)
> continue
> end

Ainsi, la vérification de ptrace sera réussi, et on pourra mettre un autre breakpoint à la fin de la fonction,
là ou on compare le numéro sériel et le hash du login :

(gdb) b *0x08048866
(gdb) run
Starting program: /home/users/level06/level06 
***********************************
*		level06		  *
***********************************
-> Enter Login: AAAAAA
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 2

Catchpoint 1 (call to syscall ptrace), 0xf7fdb440 in __kernel_vsyscall ()

Catchpoint 1 (returned from syscall ptrace), 0xf7fdb440 in __kernel_vsyscall ()

Breakpoint 2, 0x08048866 in auth ()
(gdb) x/wx $ebp-0x10
0xffffd478:	0x005f0c3a

le hash de notre login "AAAAAA" est égal à 0x005f0c3a = 6229050

Ainsi, on peut faire :
$ ./level06
***********************************
*		level06		  *
***********************************
-> Enter Login: AAAAAA
***********************************
***** NEW ACCOUNT DETECTED ********
***********************************
-> Enter Serial: 6229050
Authenticated!
$ cat /home/users/level07/.pass
GbcPDRgsFK77LNnnuh7QyFYA2942Gp8yKj9KrWD8